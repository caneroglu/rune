// Patricia Tree K/V DB Query Language

// ---------- Lexical ----------
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
NEWLINE    = _{ "\r\n" | "\n" }

// Operators
op_upsert = { "+" }
op_delete = { "-" }
op_read = { "@" }
op_rename = { "+=" }
operator = { op_rename | op_upsert | op_delete | op_read }

// Access modes
exact_access = { ":" }
radix_access = { "." }
access_mode = { exact_access | radix_access }

// Identifiers
db_name = @{ (ASCII_ALPHANUMERIC | "_") ~ (ASCII_ALPHANUMERIC | "_" | "-")* }

// ---------- Quoted / Raw tokens ----------
ESCAPED   = { "\\" ~ ANY }                       // \" \\ \n vs. decode'u yürütme katmanında yap
DQSTR     = { "\"" ~ (ESCAPED | (!"\"" ~ ANY))* ~ "\"" }

value_raw = @{ (!(";" | ">" | "[" | NEWLINE) ~ ANY)* }
key_raw   = @{ (!("=" | ";" | ">" | "[" | WHITESPACE | "*") ~ ANY)+ }
wildcard  = { "*" }

key_part  = { key_raw | wildcard }
key_pattern = { key_part+ }

key       = { DQSTR | key_pattern }
value     = { DQSTR | value_raw }

// * : wildcard operatörü eklesem mi yoksa, dinamik olarak mı parse etsem?

number = @{ ASCII_DIGIT+ }
flag   = { ^"nx" | ^"xx" | ^"ttl" ~ "=" ~ number }
flags  = { ("[" ~ flag ~ ("," ~ flag)* ~ "]")? }
range_specifier = { "[" ~ number? ~ ":" ~ number? ~ "]" }


// ---------- Commands ----------
upsert_cmd = { op_upsert ~ db_name ~ access_mode ~ key ~ "=" ~ value ~ flags }
// delete/read prefix (radix) veya exact (:) alabilir
delete_cmd = { op_delete ~ db_name ~ access_mode ~ key }
read_cmd   = { op_read ~ db_name ~ access_mode ~ key ~ range_specifier? }

// rename için exact şart - birden fazla key'i aynı isimlendirmek K/V'ye aykırı.
// rename exact ister; opsiyonel [nx] vb. (örn. yeni ad yoksa)
rename_cmd = { op_rename ~ db_name ~ exact_access ~ key ~ "=" ~ key ~ flags }

command = { rename_cmd | upsert_cmd | delete_cmd | read_cmd }

// ---------- Pipeline ----------
// '>' quoted dışında ayırıcıdır; key/value RAW hali '>' içeremez.
pipeline = { command ~ (">" ~ command)+ }

// ---------- Comments ----------
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

// ---------- Statement & Program ----------
statement = { pipeline | command | COMMENT }

// En az bir ifade/yorum beklenir
program = { SOI ~ statement ~ (";" ~ statement)* ~ EOI }